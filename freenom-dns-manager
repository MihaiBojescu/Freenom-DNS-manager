#!/usr/bin/env python3
import sys
import json
import time
import getpass
import datetime
import requests
from html.parser import HTMLParser

urls = {
    "LOGIN_URL": "https://my.freenom.com/clientarea.php",
    "DO_LOGIN_URL": "https://my.freenom.com/dologin.php",
    "DOMAINS_PAGE_URL": "https://my.freenom.com/clientarea.php?action=domains",
    "MANAGE_DOMAIN_PAGE_URL": "https://my.freenom.com/clientarea.php?managedns=&domainid=",
    "FREENOM_STUB_URL": "https://my.freenom.com/"
}

timeout = 10


class tokenPageParser(HTMLParser):
    def __init__(self, *args):
        super().__init__(*args)
        self.inForm = False
        self.shouldContinue = True
        self.token = ""

    def handle_starttag(self, tag, attrs):
        if self.shouldContinue:
            if tag == "form":
                self.inForm = True
            if tag == "input" and attrs[1][1] == "token" and self.inForm:
                self.token = attrs[2][1]
                self.shouldContinue = False

    def handle_endtag(self, tag):
        if tag == "form":
            self.inForm = False

    def getToken(self):
        return self.token


class domainPageParser(HTMLParser):
    def __init__(self, *args):
        super().__init__(*args)
        self.domains = []
        self.startOfDomains = False
        self.currentDomain = {}
        self.itterator = 0
        self.remainderFunctions = {
            0: self.setName,
            1: self.setId,
            2: self.appendDomain
        }

    def setName(self, attrs):
        self.currentDomain["name"] = attrs[0][1].replace(
            "http:", "").replace("/", "")

    def setId(self, attrs):
        self.currentDomain["id"] = attrs[1][1][attrs[1][1].rfind("&id=") + 4:]

    def appendDomain(self, attrs):
        self.currentDomain["url"] = urls["MANAGE_DOMAIN_PAGE_URL"]
        self.currentDomain["url"] = self.currentDomain["url"].replace(
            "managedns=", "managedns=" + self.currentDomain["name"])
        self.currentDomain["url"] = self.currentDomain["url"].replace(
            "domainid=", "domainid=" + self.currentDomain["id"])
        self.domains.append(self.currentDomain)
        self.currentDomain = {}

    def handle_starttag(self, tag, attrs):
        if tag == "tbody":
            self.startOfDomains = True

        elif self.startOfDomains == True:
            if tag == "a":
                self.remainderFunctions[self.itterator % 3](attrs)
                self.itterator += 1

    def handle_endtag(self, tag):
        if tag == "tbody":
            self.startOfDomains = False

    def getDomains(self):
        return self.domains


class removePageParser(HTMLParser):
    def __init__(self, *args, session):
        super().__init__(*args)
        self.startOfTable = False
        self.firstTable = True
        self.itterator = 0
        self.session = session

    def handle_starttag(self, tag, attrs):
        if tag == "tbody" and self.firstTable:
            self.startOfTable = True

        elif tag == "td" and self.startOfTable and self.firstTable:
            self.itterator += 1

        elif tag == "a" and self.itterator % 5 == 0 and self.startOfTable and self.firstTable:
            self.session.get(urls["FREENOM_STUB_URL"] + attrs[0][1], timeout=timeout)

    def handle_endtag(self, tag):
        if tag == "tbody":
            self.startOfTable = False
            self.firstTable = False

    def resetParser(self):
        self.firstTable = True
        self.itterator = 0


def timestampedPrint(str):
    print(' - '.join([datetime.datetime.now().isoformat(), str]))


def readInputs():
    inputs = {
        "username": "",
        "password": "",
        "workDomain": "",
        "remove": False,
        "add": False,
        "cron": False,
        "time": 100
    }

    try:
        for arg in sys.argv:
            if arg.find("username=") != -1:
                inputs["username"] = arg[arg.find("=") + 1:]
            elif arg.find("password=") != -1:
                inputs["password"] = arg[arg.find("=") + 1:]
            elif arg.find("workDomain=") != -1:
                inputs["workDomain"] = arg[arg.find("=") + 1:]
            elif arg.find("+remove") != -1:
                inputs["remove"] = True
            elif arg.find("+add") != -1:
                inputs["add"] = True
            elif arg.find("+cron") != -1:
                inputs["cron"] = True
            elif arg.find("time=") != -1:
                inputs["time"] = int(arg[arg.find("=") + 1:])
            elif arg.find("timeout=") != -1:
                timeout = int(arg[arg.find("=") + 1:])

        if inputs["username"] == "":
            inputs["username"] = input("Username: ")
        if inputs["password"] == "":
            inputs["password"] = getpass.getpass("Password: ")
            
        if inputs["add"] == False and inputs["remove"] == False:
            inputs["add"] = True
            inputs["remove"] = True

        return inputs

    except KeyboardInterrupt:
        print("Keyboard interrupt detected.")


def cron(credentials):
    currentIp = {"ip": "0.0.0.0"}
    lastIp = currentIp

    while True:
        try:
            timestampedPrint("Different ip")
            currentIp = json.loads(requests.get("https://api.ipify.org?format=json", timeout=timeout).text)

            if (currentIp["ip"] != lastIp["ip"]):
                manageDns(credentials, currentIp)

            lastIp = currentIp

        except:
            timestampedPrint("Can't connect")

        time.sleep(credentials["time"])


def noCron(credentials):
    currentIp = json.loads(requests.get("https://api.ipify.org?format=json", timeout=timeout).text)
    manageDns(credentials, currentIp)


def manageDns(credentials, ip):
    session = doLogin(credentials)
    domains = getDomains(session)
    if (credentials["workDomain"] != ""): domains = [domain for domain in domains if domain["name"] == credentials["workDomain"]]
    if (credentials["remove"]): removeRecords(session, domains)
    if (credentials["add"]): appendRecords(session, domains, ip)
    timestampedPrint("Done")


def doLogin(credentials):
    timestampedPrint("Logging in...")
    html = requests.get(urls["LOGIN_URL"], timeout=timeout).text
    parser = tokenPageParser()
    parser.feed(html)

    user = {
        "token": parser.getToken(),
        "username": credentials["username"],
        "password": credentials["password"]
    }

    headers = {
        "Content-type": "application/x-www-form-urlencoded",
        "Referer": "https://my.freenom.com",
        "Host": "my.freenom.com",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36"
    }

    session = requests.session()
    session.post(urls["DO_LOGIN_URL"], headers=headers, data=user, timeout=timeout)
    timestampedPrint("Logged in")
    return session


def getDomains(session):
    timestampedPrint("Getting domains...")
    html = session.get(urls["DOMAINS_PAGE_URL"], timeout=timeout).text
    parser = domainPageParser()
    parser.feed(html)

    domains = parser.getDomains()
    timestampedPrint("Got domains")
    return domains


def removeRecords(session, domains):
    timestampedPrint("Removing DNS records...")

    parser = removePageParser(session=session)
    for domain in domains:
        timestampedPrint("For domain " + domain["name"] + "...")
        parser.resetParser()
        parser.feed(session.get(domain["url"], timeout=timeout).text)

    timestampedPrint("Removed DNS records")


def appendRecords(session, domains, ip):
    timestampedPrint("Appending DNS records...")

    parser = tokenPageParser()

    data = {
        "dnsaction": "add",
        "addrecord[0][name]": "",
        "addrecord[0][type]": "A",
        "addrecord[0][ttl]": "300",
        "addrecord[0][value]": str(ip["ip"]),
        "addrecord[0][priority]": "",
        "addrecord[0][port]": "",
        "addrecord[0][weight]": "",
        "addrecord[0][forward_type]": "1",
        "addrecord[1][name]": "WWW",
        "addrecord[1][type]": "A",
        "addrecord[1][ttl]": "300",
        "addrecord[1][value]": str(ip["ip"]),
        "addrecord[1][priority]": "",
        "addrecord[1][port]": "",
        "addrecord[1][weight]": "",
        "addrecord[1][forward_type]": "1",
    }

    headers = {
        "Content-type": "application/x-www-form-urlencoded",
        "Referer": "",
        "Host": "my.freenom.com",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36"
    }

    for domain in domains:
        timestampedPrint("For domain " + domain["name"] + "...")
        parser.feed(session.get(domain["url"], timeout=timeout).text)
        headers["referer"] = domain["url"]
        data["token"] = parser.getToken()
        session.post(domain["url"], headers=headers, data=data, timeout=timeout)

    timestampedPrint("Appended DNS records")


def main():
    try: 
        credentials = readInputs()
        if (credentials["cron"]): cron(credentials)
        else: noCron(credentials)
    except KeyboardInterrupt:
        timestampedPrint("Stopping")
    except:
        pass


if __name__ == '__main__':
    main()
